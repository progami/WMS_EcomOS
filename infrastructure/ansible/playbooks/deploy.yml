---
- name: Deploy WMS Application
  hosts: wms_servers
  become: yes
  vars:
    deployment_timestamp: "{{ ansible_date_time.epoch }}"
  
  tasks:
    - name: Ensure application directory exists
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Clone/update repository
      git:
        repo: "{{ git_repo | default('https://github.com/your-org/wms.git') }}"
        dest: "{{ app_directory }}"
        version: "{{ git_branch | default('main') }}"
        force: yes
      become_user: "{{ ansible_user }}"
      register: git_result

    - name: Create .env.production file
      template:
        src: env.production.j2
        dest: "{{ app_directory }}/.env.production"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      become_user: "{{ ansible_user }}"

    - name: Install Node.js dependencies
      npm:
        path: "{{ app_directory }}"
        production: yes
      become_user: "{{ ansible_user }}"
      environment:
        NODE_ENV: production

    - name: Run database migrations
      command: npm run db:migrate
      args:
        chdir: "{{ app_directory }}"
      become_user: "{{ ansible_user }}"
      environment:
        NODE_ENV: production
      when: git_result.changed or force_migrate | default(false)

    - name: Build Next.js application
      command: npm run build:prod
      args:
        chdir: "{{ app_directory }}"
      become_user: "{{ ansible_user }}"
      environment:
        NODE_ENV: production
      when: git_result.changed or force_build | default(false)

    - name: Setup PM2 ecosystem config
      template:
        src: ecosystem.config.js.j2
        dest: "{{ app_directory }}/ecosystem.config.js"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      become_user: "{{ ansible_user }}"

    - name: Start/restart application with PM2
      command: pm2 startOrRestart ecosystem.config.js --update-env
      args:
        chdir: "{{ app_directory }}"
      become_user: "{{ ansible_user }}"
      environment:
        NODE_ENV: production

    - name: Save PM2 process list
      command: pm2 save
      become_user: "{{ ansible_user }}"

    - name: Configure Nginx
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/wms
      notify: reload nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/wms
        dest: /etc/nginx/sites-enabled/wms
        state: link
      notify: reload nginx

    - name: Setup backup cron job
      cron:
        name: "WMS database backup"
        minute: "0"
        hour: "2"
        job: "cd /home/{{ ansible_user }} && ansible-playbook -i {{ app_directory }}/infrastructure/ansible/inventory/prod /home/{{ ansible_user }}/infrastructure/ansible/playbooks/backup.yml"
        user: "{{ ansible_user }}"
      when: enable_backups | default(true)

    - name: Setup weekly storage calculation cron job
      cron:
        name: "WMS weekly storage calculation"
        minute: "0"
        hour: "2"
        weekday: "1"  # Monday
        job: "cd {{ app_directory }} && npm run calculate:storage:weekly >> {{ app_directory }}/logs/cron-storage-calculation.log 2>&1"
        user: "{{ ansible_user }}"
      when: enable_storage_calculation | default(true)

    - name: Setup storage ledger update cron job
      cron:
        name: "WMS storage ledger update"
        minute: "0"
        hour: "2"
        weekday: "2"  # Tuesday
        job: "cd {{ app_directory }} && npx tsx scripts/production/update-storage-ledger-weekly.ts >> {{ app_directory }}/logs/storage-ledger-cron.log 2>&1"
        user: "{{ ansible_user }}"
      when: enable_storage_ledger | default(true)

  handlers:
    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded