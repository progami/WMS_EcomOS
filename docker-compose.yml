version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/wms_dev}
        NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/wms_dev}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-dev-secret-key}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      AMAZON_SP_APP_ID: ${AMAZON_SP_APP_ID}
      AMAZON_REFRESH_TOKEN: ${AMAZON_REFRESH_TOKEN}
      AMAZON_MARKETPLACE_ID: ${AMAZON_MARKETPLACE_ID}
      AMAZON_REGION: ${AMAZON_REGION}
      AMAZON_SP_APP_CLIENT_ID: ${AMAZON_SP_APP_CLIENT_ID}
      AMAZON_SP_APP_CLIENT_SECRET: ${AMAZON_SP_APP_CLIENT_SECRET}
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - wms-network

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: wms_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wms-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wms-network

volumes:
  postgres_data:
  redis_data:

networks:
  wms-network:
    driver: bridge