name: Update WMS to Path-based Routing

on:
  workflow_dispatch:

jobs:
  update-path:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update Nginx configuration
      run: |
        # Get instance ID
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=wms-production" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        
        echo "Instance ID: $INSTANCE_ID"
        
        # Create and upload new Nginx configuration
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "sudo tee /etc/nginx/sites-available/targonglobal > /dev/null << '\''NGINX_CONFIG'\''",
            "server {",
            "    listen 80;",
            "    listen 443 ssl http2;",
            "    server_name targonglobal.com www.targonglobal.com;",
            "    ",
            "    ssl_certificate /etc/letsencrypt/live/targonglobal.com/fullchain.pem;",
            "    ssl_certificate_key /etc/letsencrypt/live/targonglobal.com/privkey.pem;",
            "    ",
            "    location /WMS {",
            "        rewrite ^/WMS/(.*)$ /$1 break;",
            "        rewrite ^/WMS$ / break;",
            "        ",
            "        proxy_pass http://127.0.0.1:3000;",
            "        proxy_http_version 1.1;",
            "        proxy_set_header Upgrade $http_upgrade;",
            "        proxy_set_header Connection '\''upgrade'\'';",
            "        proxy_set_header Host $host;",
            "        proxy_set_header X-Real-IP $remote_addr;",
            "        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
            "        proxy_set_header X-Forwarded-Proto $scheme;",
            "        proxy_set_header X-Forwarded-Host $host;",
            "        proxy_set_header X-Forwarded-Prefix /WMS;",
            "        proxy_cache_bypass $http_upgrade;",
            "        proxy_redirect off;",
            "    }",
            "    ",
            "    location = / {",
            "        return 301 /WMS;",
            "    }",
            "}",
            "NGINX_CONFIG",
            "sudo nginx -t && sudo systemctl reload nginx"
          ]' \
          --output json > nginx-update.json
        
        COMMAND_ID=$(jq -r '.Command.CommandId' nginx-update.json)
        echo "Nginx update command ID: $COMMAND_ID"
        
        # Wait for Nginx update
        sleep 30

    - name: Update Next.js configuration
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=wms-production" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        
        # Update next.config.js
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "cd /home/wms/wms-app",
            "cat > next.config.js << '\''EOF'\''",
            "/** @type {import('\''next'\'').NextConfig} */",
            "const nextConfig = {",
            "  basePath: '\''/WMS'\'',",
            "  assetPrefix: '\''/WMS'\'',",
            "  output: '\''standalone'\'',",
            "  reactStrictMode: true,",
            "  swcMinify: true,",
            "  images: {",
            "    unoptimized: true,",
            "  },",
            "}",
            "",
            "module.exports = nextConfig",
            "EOF"
          ]' \
          --output json > nextjs-update.json
        
        COMMAND_ID=$(jq -r '.Command.CommandId' nextjs-update.json)
        echo "Next.js config update command ID: $COMMAND_ID"
        
        # Wait for update
        sleep 20

    - name: Update PM2 configuration and rebuild
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=wms-production" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].InstanceId" \
          --output text)
        
        # Update PM2 ecosystem config and rebuild
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "cd /home/wms/wms-app",
            "cat > ecosystem.config.js << '\''EOF'\''",
            "module.exports = {",
            "  apps: [{",
            "    name: '\''wms-production'\'',",
            "    script: '\''.next/standalone/server.js'\'',",
            "    cwd: '\''/home/wms/wms-app'\'',",
            "    env: {",
            "      NODE_ENV: '\''production'\'',",
            "      PORT: 3000,",
            "      HOSTNAME: '\''127.0.0.1'\'',",
            "      DATABASE_URL: '\''postgresql://wms:wms_secure_password_2024@localhost:5432/wms'\'',",
            "      NEXTAUTH_URL: '\''https://targonglobal.com/WMS'\'',",
            "      NEXTAUTH_URL_INTERNAL: '\''http://127.0.0.1:3000'\'',",
            "      NEXTAUTH_SECRET: '\''production_secret_key_change_in_production_123456'\'',",
            "      NEXT_PUBLIC_APP_URL: '\''https://targonglobal.com/WMS'\'',",
            "      NEXT_PUBLIC_BASE_PATH: '\''/WMS'\''",
            "    }",
            "  }]",
            "};",
            "EOF",
            "pm2 stop wms-production",
            "npm run build",
            "cp -r public/* .next/standalone/public/ || true",
            "cp -r .next/static .next/standalone/.next/ || true",
            "pm2 delete wms-production",
            "pm2 start ecosystem.config.js",
            "pm2 save"
          ]' \
          --output json > rebuild.json
        
        COMMAND_ID=$(jq -r '.Command.CommandId' rebuild.json)
        echo "Rebuild command ID: $COMMAND_ID"
        
        # Wait for rebuild to complete
        sleep 60

    - name: Verify deployment
      run: |
        echo "Deployment complete!"
        echo "Application should now be accessible at: https://targonglobal.com/WMS"