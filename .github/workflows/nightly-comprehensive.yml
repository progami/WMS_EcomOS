name: Nightly Comprehensive Tests

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      include-performance:
        description: 'Include performance tests'
        type: boolean
        default: true
      include-security:
        description: 'Include security scanning'
        type: boolean
        default: true

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_nightly_${{ matrix.test-type }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_nightly_${{ matrix.test-type }}
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Install Playwright (E2E only)
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: Build application (E2E only)
        if: matrix.test-type == 'e2e'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_nightly_${{ matrix.test-type }}
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: nightly-test-secret
        run: npm run build

      - name: Run ${{ matrix.test-type }} tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_nightly_${{ matrix.test-type }}
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: nightly-test-secret
          NODE_ENV: test
        run: |
          if [[ "${{ matrix.test-type }}" == "unit" ]]; then
            npm test -- tests/__tests__/lib --coverage --coverageReporters=json
          elif [[ "${{ matrix.test-type }}" == "integration" ]]; then
            npm test -- tests/__tests__/api --coverage --coverageReporters=json
          elif [[ "${{ matrix.test-type }}" == "e2e" ]]; then
            npx playwright test --reporter=json
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.test-type }}-results
          path: |
            coverage/
            test-results/
            playwright-report/

  coverage-analysis:
    name: Coverage Analysis
    needs: full-test-suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v3

      - name: Merge coverage reports
        run: |
          npm install -g nyc
          mkdir -p combined-coverage
          
          # Merge all coverage files
          nyc merge unit-results/coverage combined-coverage/coverage-final.json
          nyc merge integration-results/coverage combined-coverage/coverage-final.json
          
          # Generate report
          nyc report --reporter=html --reporter=text-summary --temp-dir=combined-coverage

      - name: Check coverage thresholds
        run: |
          # Extract coverage percentages
          LINES=$(nyc report --reporter=json-summary --temp-dir=combined-coverage | jq '.total.lines.pct')
          BRANCHES=$(nyc report --reporter=json-summary --temp-dir=combined-coverage | jq '.total.branches.pct')
          FUNCTIONS=$(nyc report --reporter=json-summary --temp-dir=combined-coverage | jq '.total.functions.pct')
          
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "- Lines: $LINES%" >> $GITHUB_STEP_SUMMARY
          echo "- Branches: $BRANCHES%" >> $GITHUB_STEP_SUMMARY
          echo "- Functions: $FUNCTIONS%" >> $GITHUB_STEP_SUMMARY
          
          # Check against thresholds
          if (( $(echo "$LINES < 70" | bc -l) )); then
            echo "::warning::Line coverage is below 70%"
          fi
          if (( $(echo "$BRANCHES < 60" | bc -l) )); then
            echo "::warning::Branch coverage is below 60%"
          fi
          if (( $(echo "$FUNCTIONS < 70" | bc -l) )); then
            echo "::warning::Function coverage is below 70%"
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  performance-benchmarks:
    name: Performance Benchmarks
    if: github.event.inputs.include-performance != 'false'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g autocannon

      - name: Setup large test dataset
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_perf
        run: |
          npx prisma migrate deploy
          
          # Create performance test data
          cat > generate-perf-data.ts << 'EOF'
          import { PrismaClient } from '@prisma/client'
          const prisma = new PrismaClient()
          
          async function main() {
            // Create test warehouses
            const warehouses = await Promise.all(
              Array.from({ length: 5 }, (_, i) => 
                prisma.warehouse.create({
                  data: {
                    code: `PERF-WH-${i + 1}`,
                    name: `Performance Test Warehouse ${i + 1}`,
                    address: '123 Test St',
                    isActive: true
                  }
                })
              )
            )
            
            // Create test SKUs
            const skus = await Promise.all(
              Array.from({ length: 100 }, (_, i) => 
                prisma.sku.create({
                  data: {
                    skuCode: `PERF-SKU-${String(i + 1).padStart(3, '0')}`,
                    description: `Performance Test Product ${i + 1}`,
                    unitsPerCarton: 24,
                    isActive: true
                  }
                })
              )
            )
            
            // Create 10,000 transactions
            console.log('Generating 10,000 transactions...')
            const batchSize = 100
            for (let batch = 0; batch < 100; batch++) {
              const transactions = Array.from({ length: batchSize }, (_, i) => {
                const warehouse = warehouses[Math.floor(Math.random() * warehouses.length)]
                const sku = skus[Math.floor(Math.random() * skus.length)]
                const isReceive = Math.random() > 0.5
                
                return {
                  warehouseId: warehouse.id,
                  skuId: sku.id,
                  transactionType: isReceive ? 'RECEIVE' : 'SHIP',
                  transactionDate: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),
                  batchLot: `BATCH-${batch}-${i}`,
                  cartonsIn: isReceive ? Math.floor(Math.random() * 100) + 1 : 0,
                  cartonsOut: !isReceive ? Math.floor(Math.random() * 50) + 1 : 0,
                  storagePalletsIn: isReceive ? Math.floor(Math.random() * 10) + 1 : 0,
                  shippingPalletsOut: !isReceive ? Math.floor(Math.random() * 5) + 1 : 0,
                  createdById: '00000000-0000-0000-0000-000000000001'
                }
              })
              
              await prisma.inventoryTransaction.createMany({ data: transactions })
              console.log(`Created batch ${batch + 1}/100`)
            }
            
            console.log('Performance test data created successfully')
          }
          
          main()
            .catch(console.error)
            .finally(() => prisma.$disconnect())
          EOF
          
          npx tsx generate-perf-data.ts

      - name: Build application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_perf
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: perf-test-secret
        run: npm run build

      - name: Run performance tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_perf
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: perf-test-secret
        run: |
          # Start the application
          npm start &
          SERVER_PID=$!
          
          # Wait for server
          npx wait-on http://localhost:3000 -t 30000
          
          echo "## Performance Test Results" >> performance-results.md
          echo "" >> performance-results.md
          
          # Test cost aggregation endpoint
          echo "### Cost Aggregation API" >> performance-results.md
          autocannon -c 10 -d 30 -j http://localhost:3000/api/reports/costs >> perf-costs.json
          cat perf-costs.json | jq '.requests.average' >> performance-results.md
          
          # Test invoice list endpoint
          echo "### Invoice List API" >> performance-results.md
          autocannon -c 10 -d 30 -j http://localhost:3000/api/invoices >> perf-invoices.json
          cat perf-invoices.json | jq '.requests.average' >> performance-results.md
          
          # Test transaction search
          echo "### Transaction Search API" >> performance-results.md
          autocannon -c 10 -d 30 -j "http://localhost:3000/api/transactions?search=PERF" >> perf-search.json
          cat perf-search.json | jq '.requests.average' >> performance-results.md
          
          # Simple memory check
          ps aux | grep node | grep -v grep | awk '{print $6}' > memory-usage.txt || true
          
          # Cleanup
          kill $SERVER_PID
          
          cat performance-results.md >> $GITHUB_STEP_SUMMARY

      - name: Compare with baseline
        run: |
          # Download previous results if available
          if [[ -f "performance-baseline.json" ]]; then
            echo "## Performance Comparison" >> $GITHUB_STEP_SUMMARY
            # Add comparison logic here
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            performance-results.md
            perf-*.json
            .clinic/

  security-scan:
    name: Security Scanning
    if: github.event.inputs.include-security != 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --production > audit-report.txt || true
          cat audit-report.txt
          
          # Count vulnerabilities
          CRITICAL=$(grep -c "critical" audit-report.txt || true)
          HIGH=$(grep -c "high" audit-report.txt || true)
          
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "- Critical vulnerabilities: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- High vulnerabilities: $HIGH" >> $GITHUB_STEP_SUMMARY
          
          if [[ $CRITICAL -gt 0 ]]; then
            echo "::error::Found $CRITICAL critical vulnerabilities"
            exit 1
          fi

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'WMS'
          path: '.'
          format: 'HTML'

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            audit-report.txt
            reports/

  notify-results:
    name: Notify Results
    needs: [full-test-suite, coverage-analysis, performance-benchmarks, security-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Prepare notification
        run: |
          # Determine overall status
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            STATUS="❌ Failed"
            COLOR="danger"
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            STATUS="⚠️ Cancelled"
            COLOR="warning"
          else
            STATUS="✅ Passed"
            COLOR="good"
          fi
          
          echo "NOTIFICATION_STATUS=$STATUS" >> $GITHUB_ENV
          echo "NOTIFICATION_COLOR=$COLOR" >> $GITHUB_ENV

      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.NOTIFICATION_COLOR }}
          text: |
            Nightly Test Results: ${{ env.NOTIFICATION_STATUS }}
            
            Test Suite: ${{ needs.full-test-suite.result }}
            Coverage: ${{ needs.coverage-analysis.result }}
            Performance: ${{ needs.performance-benchmarks.result }}
            Security: ${{ needs.security-scan.result }}
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}