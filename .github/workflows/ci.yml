name: CI

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      run-performance:
        description: 'Run performance tests'
        type: boolean
        default: false
      run-security:
        description: 'Run security scanning'
        type: boolean
        default: false

env:
  NODE_VERSION: '20'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # PR Validation
  pr-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Label PR
        uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          
      - name: Check PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Add size label
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_max_size: 10
          s_max_size: 100
          m_max_size: 500
          l_max_size: 1000

  # Code Quality
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - run: npm install
      
      - name: Lint
        run: npm run lint
        
      - name: Type Check
        run: npm run type-check

  # Build
  build:
    needs: quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['18', '20']
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          
      - run: npm install
      
      - name: Generate Prisma
        run: npx prisma generate
        
      - name: Build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
        run: npm run build
        
      - name: Upload build
        if: matrix.node == '20'
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next
          retention-days: 1

  # Tests
  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    strategy:
      matrix:
        suite: [unit, integration, e2e]
        
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - run: npm install
      
      - name: Setup Database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        run: |
          npx prisma generate
          npx prisma migrate deploy || echo "No migrations"
          
      - name: Run ${{ matrix.suite }} tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
          REDIS_URL: redis://localhost:6379
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
        run: npm run test:${{ matrix.suite }}

  # Security (conditional)
  security:
    if: github.event_name == 'schedule' || github.event.inputs.run-security == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - run: npm install
      
      - name: Audit
        run: npm audit --audit-level=high || true
        continue-on-error: true

  # Performance (conditional)  
  performance:
    if: github.event_name == 'schedule' || github.event.inputs.run-performance == 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - run: npm install
      
      - name: Performance tests
        run: echo "Performance tests would run here"

  # Release (tags only)
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          generateReleaseNotes: true
          
  # Update badges (main only)
  badges:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Update README
        run: |
          echo "Badge update would happen here"
          
  # PR Comment
  comment:
    if: github.event_name == 'pull_request'
    needs: [quality, test]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'âœ… All CI checks passed!'
            })