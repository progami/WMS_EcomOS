name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/warehouse_test
        run: npm run test:coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=warehouse-management
            -Dsonar.organization=your-org
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.typescript.tsconfigPath=tsconfig.json
            -Dsonar.exclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/node_modules/**,**/coverage/**,.next/**
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  lint-staged:
    name: Lint Staged Files
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.ts
            **/*.tsx
            **/*.js
            **/*.jsx

      - name: Lint changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          echo "Linting changed files..."
          for file in $CHANGED_FILES; do
            echo "Checking: $file"
            npx eslint "$file" --max-warnings 0
          done

      - name: Check Prettier formatting
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          echo "Checking formatting..."
          for file in $CHANGED_FILES; do
            npx prettier --check "$file"
          done

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: warehouse_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/warehouse_test
        run: |
          npx prisma db push --skip-generate --accept-data-loss
          npx prisma db seed

      - name: Build application
        run: npm run build

      - name: Start server
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/warehouse_test
          NEXTAUTH_SECRET: test-secret-for-ci-only
          NEXTAUTH_URL: http://localhost:3000
        run: |
          npm run start &
          sleep 10

      - name: Run accessibility tests
        run: |
          npx playwright test tests/e2e/accessibility.spec.ts --project=chromium || true

      - name: Run axe accessibility scan
        run: |
          npm install -g @axe-core/cli
          axe http://localhost:3000 --save accessibility-report.json || true

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: accessibility-report.json