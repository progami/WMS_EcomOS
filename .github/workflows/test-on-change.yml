name: Test on Change

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      cost-aggregation: ${{ steps.filter.outputs.cost-aggregation }}
      export-functionality: ${{ steps.filter.outputs.export-functionality }}
      transaction-api: ${{ steps.filter.outputs.transaction-api }}
      invoice-api: ${{ steps.filter.outputs.invoice-api }}
      invoice-workflow: ${{ steps.filter.outputs.invoice-workflow }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            cost-aggregation:
              - 'src/lib/calculations/cost-aggregation.ts'
              - 'tests/__tests__/lib/calculations/cost-aggregation.test.ts'
              - 'src/app/api/reports/**'
            export-functionality:
              - 'src/lib/dynamic-export.ts'
              - 'src/lib/export-configurations.ts'
              - 'src/lib/import-config.ts'
              - 'tests/__tests__/lib/dynamic-export.test.ts'
              - 'tests/__tests__/lib/export-configurations.test.ts'
              - 'src/app/api/export/**'
              - 'src/app/api/import/**'
            transaction-api:
              - 'src/app/api/transactions/**'
              - 'tests/__tests__/api/transactions/**'
              - 'prisma/schema.prisma'
            invoice-api:
              - 'src/app/api/invoices/**'
              - 'tests/__tests__/api/invoices/**'
              - 'src/lib/calculations/**'
            invoice-workflow:
              - 'src/app/finance/invoices/**'
              - 'tests/e2e/invoice-workflow.spec.ts'
              - 'src/components/finance/**'

  test-cost-aggregation:
    name: Test Cost Aggregation
    needs: detect-changes
    if: needs.detect-changes.outputs.cost-aggregation == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run cost aggregation tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NODE_ENV: test
        run: |
          npm test -- tests/__tests__/lib/calculations/cost-aggregation.test.ts --coverage
          
      - name: Check coverage threshold
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::error::Coverage is below 80% for cost aggregation logic"
            exit 1
          fi

  test-export-functionality:
    name: Test Export Functionality
    needs: detect-changes
    if: needs.detect-changes.outputs.export-functionality == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
        run: |
          npx prisma migrate deploy

      - name: Run export tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NODE_ENV: test
        run: |
          npm test -- tests/__tests__/lib/dynamic-export.test.ts tests/__tests__/lib/export-configurations.test.ts --coverage

      - name: Test import/export E2E
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
        run: |
          npm run build
          npx playwright install chromium
          npx playwright test tests/e2e/import-export.spec.ts

  test-transaction-api:
    name: Test Transaction API
    needs: detect-changes
    if: needs.detect-changes.outputs.transaction-api == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run transaction API tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          NODE_ENV: test
        run: |
          npm test -- tests/__tests__/api/transactions --coverage

      - name: Test transaction endpoints
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
        run: |
          # Build and start the app
          npm run build
          npm start &
          SERVER_PID=$!
          
          # Wait for server to be ready
          npx wait-on http://localhost:3000/api/health -t 30000
          
          # Run API tests
          npm run test:api -- --grep "transactions"
          
          # Cleanup
          kill $SERVER_PID

  test-invoice-system:
    name: Test Invoice System
    needs: detect-changes
    if: needs.detect-changes.outputs.invoice-api == 'true' || needs.detect-changes.outputs.invoice-workflow == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run invoice API tests
        if: needs.detect-changes.outputs.invoice-api == 'true'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
          NODE_ENV: test
        run: |
          npm test -- tests/__tests__/api/invoices --coverage

      - name: Run invoice workflow E2E tests
        if: needs.detect-changes.outputs.invoice-workflow == 'true'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
        run: |
          npm run build
          npx playwright install chromium
          npx playwright test tests/e2e/invoice-workflow.spec.ts

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: invoice-test-results
          path: |
            playwright-report/
            test-results/
            coverage/

  summary:
    name: Test Summary
    needs: [test-cost-aggregation, test-export-functionality, test-transaction-api, test-invoice-system]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        run: |
          echo "## Component Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Function to check job result
          check_result() {
            local job_name=$1
            local job_result=$2
            local job_skipped=$3
            
            if [[ "$job_skipped" == "true" ]]; then
              echo "⏭️ $job_name: Skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
            elif [[ "$job_result" == "success" ]]; then
              echo "✅ $job_name: Passed" >> $GITHUB_STEP_SUMMARY
            elif [[ "$job_result" == "failure" ]]; then
              echo "❌ $job_name: Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ $job_name: $job_result" >> $GITHUB_STEP_SUMMARY
            fi
          }
          
          check_result "Cost Aggregation" "${{ needs.test-cost-aggregation.result }}" "${{ needs.test-cost-aggregation.result == 'skipped' }}"
          check_result "Export Functionality" "${{ needs.test-export-functionality.result }}" "${{ needs.test-export-functionality.result == 'skipped' }}"
          check_result "Transaction API" "${{ needs.test-transaction-api.result }}" "${{ needs.test-transaction-api.result == 'skipped' }}"
          check_result "Invoice System" "${{ needs.test-invoice-system.result }}" "${{ needs.test-invoice-system.result == 'skipped' }}"
          
          # Determine overall status
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Some tests failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ All triggered tests passed!" >> $GITHUB_STEP_SUMMARY
          fi