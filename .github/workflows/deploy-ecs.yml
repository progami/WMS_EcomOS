name: Deploy to AWS ECS

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: wms-app
  ECS_SERVICE_PROD: wms-service-prod
  ECS_SERVICE_STAGING: wms-service-staging
  ECS_CLUSTER: wms-cluster
  ECS_TASK_DEFINITION_PROD: wms-task-prod
  ECS_TASK_DEFINITION_STAGING: wms-task-staging
  CONTAINER_NAME: wms-container

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run type check
        run: npm run type-check || true

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key
          NODE_ENV: test
        run: npm run test:ci

  deploy:
    name: Deploy to ECS
    needs: test
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ env.ECS_SERVICE_PROD }}" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION=${{ env.ECS_TASK_DEFINITION_PROD }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" >> $GITHUB_ENV
            echo "NEXTAUTH_URL=${{ secrets.PRODUCTION_URL }}" >> $GITHUB_ENV
            echo "NEXTAUTH_SECRET=${{ secrets.PRODUCTION_NEXTAUTH_SECRET }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ env.ECS_SERVICE_STAGING }}" >> $GITHUB_ENV
            echo "ECS_TASK_DEFINITION=${{ env.ECS_TASK_DEFINITION_STAGING }}" >> $GITHUB_ENV
            echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> $GITHUB_ENV
            echo "NEXTAUTH_URL=${{ secrets.STAGING_URL }}" >> $GITHUB_ENV
            echo "NEXTAUTH_SECRET=${{ secrets.STAGING_NEXTAUTH_SECRET }}" >> $GITHUB_ENV
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build \
            --build-arg DATABASE_URL="${{ env.DATABASE_URL }}" \
            --build-arg NEXTAUTH_URL="${{ env.NEXTAUTH_URL }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ENVIRONMENT }}-latest \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.ENVIRONMENT }}-latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            NODE_ENV=${{ env.ENVIRONMENT }}
            DATABASE_URL=${{ env.DATABASE_URL }}
            NEXTAUTH_URL=${{ env.NEXTAUTH_URL }}
            NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }}
            AMAZON_SP_APP_ID=${{ secrets.AMAZON_SP_APP_ID }}
            AMAZON_REFRESH_TOKEN=${{ secrets.AMAZON_REFRESH_TOKEN }}
            AMAZON_MARKETPLACE_ID=${{ secrets.AMAZON_MARKETPLACE_ID }}
            AMAZON_REGION=${{ secrets.AMAZON_REGION }}
            AMAZON_SP_APP_CLIENT_ID=${{ secrets.AMAZON_SP_APP_CLIENT_ID }}
            AMAZON_SP_APP_CLIENT_SECRET=${{ secrets.AMAZON_SP_APP_CLIENT_SECRET }}
            NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Run post-deployment health check
        run: |
          echo "Waiting for service to stabilize..."
          sleep 60
          
          # Get the task ARN
          TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --query 'taskArns[0]' --output text)
          
          # Get the ENI ID
          ENI=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          
          # Get the public IP
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          
          # Health check
          if [ -n "$PUBLIC_IP" ]; then
            echo "Checking health at http://$PUBLIC_IP:3000/api/health"
            curl -f http://$PUBLIC_IP:3000/api/health || echo "Health check failed but continuing"
          fi

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ env.ENVIRONMENT }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true