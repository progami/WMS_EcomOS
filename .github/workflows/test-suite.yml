name: Complete Test Suite

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'prisma/**'
      - 'package*.json'
      - '.github/workflows/test-suite.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'prisma/**'
      - 'package*.json'
      - '.github/workflows/test-suite.yml'
  workflow_dispatch:
    inputs:
      test-filter:
        description: 'Test filter pattern (e.g., "cost-aggregation")'
        required: false
        type: string

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    outputs:
      unit-tests: ${{ steps.detect-tests.outputs.unit-tests }}
      api-tests: ${{ steps.detect-tests.outputs.api-tests }}
      e2e-tests: ${{ steps.detect-tests.outputs.e2e-tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect test changes
        id: detect-tests
        run: |
          # Detect which test categories have changes
          UNIT_TESTS="false"
          API_TESTS="false"
          E2E_TESTS="false"
          
          # Check for changes in test files
          if git diff --name-only HEAD~1 HEAD | grep -E "tests/__tests__/lib|src/lib" > /dev/null 2>&1; then
            UNIT_TESTS="true"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E "tests/__tests__/api|src/app/api" > /dev/null 2>&1; then
            API_TESTS="true"
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E "tests/e2e|src/app/(?!api)" > /dev/null 2>&1; then
            E2E_TESTS="true"
          fi
          
          # Always run all tests on main branch or manual trigger
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            UNIT_TESTS="true"
            API_TESTS="true"
            E2E_TESTS="true"
          fi
          
          echo "unit-tests=$UNIT_TESTS" >> $GITHUB_OUTPUT
          echo "api-tests=$API_TESTS" >> $GITHUB_OUTPUT
          echo "e2e-tests=$E2E_TESTS" >> $GITHUB_OUTPUT

  business-logic-tests:
    name: Business Logic Tests
    runs-on: ubuntu-latest
    needs: test-matrix
    if: needs.test-matrix.outputs.unit-tests == 'true'
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run cost aggregation tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NODE_ENV: test
        run: |
          npm test -- tests/__tests__/lib/calculations/cost-aggregation.test.ts --coverage

      - name: Run export configuration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NODE_ENV: test
        run: |
          npm test -- tests/__tests__/lib/export-configurations.test.ts --coverage

      - name: Run dynamic export tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_test
          NODE_ENV: test
        run: |
          npm test -- tests/__tests__/lib/dynamic-export.test.ts --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: business-logic
          name: business-logic-coverage

  api-integration-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: test-matrix
    if: needs.test-matrix.outputs.api-tests == 'true'
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_api_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        test-group:
          - { name: "Transactions API", path: "tests/__tests__/api/transactions" }
          - { name: "Invoices API", path: "tests/__tests__/api/invoices" }
          - { name: "Import API", path: "tests/__tests__/api/import" }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_api_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run ${{ matrix.test-group.name }} tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_api_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key
          NODE_ENV: test
        run: |
          npm test -- ${{ matrix.test-group.path }} --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: api-integration
          name: api-${{ matrix.test-group.name }}-coverage

  critical-workflows-e2e:
    name: Critical Workflows E2E
    runs-on: ubuntu-latest
    needs: test-matrix
    if: needs.test-matrix.outputs.e2e-tests == 'true'
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_e2e_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        browser: [chromium, firefox]
        test-suite:
          - { name: "Invoice Workflow", file: "invoice-workflow.spec.ts" }
          - { name: "Import Export", file: "import-export.spec.ts" }
          - { name: "Operations", file: "operations-*.spec.ts" }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_e2e_test
        run: |
          npx prisma migrate deploy
          npx prisma db seed

      - name: Build application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_e2e_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key
        run: npm run build

      - name: Run ${{ matrix.test-suite.name }} E2E tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_e2e_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key
          NODE_ENV: test
        run: |
          npx playwright test tests/e2e/${{ matrix.test-suite.file }} --project=${{ matrix.browser }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-${{ matrix.test-suite.name }}-${{ matrix.browser }}-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [business-logic-tests, api-integration-tests, critical-workflows-e2e]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [[ "${{ needs.business-logic-tests.result }}" == "success" ]]; then
            echo "✅ Business Logic Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Business Logic Tests: ${{ needs.business-logic-tests.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.api-integration-tests.result }}" == "success" ]]; then
            echo "✅ API Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ API Integration Tests: ${{ needs.api-integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.critical-workflows-e2e.result }}" == "success" ]]; then
            echo "✅ E2E Workflow Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Workflow Tests: ${{ needs.critical-workflows-e2e.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage Areas" >> $GITHUB_STEP_SUMMARY
          echo "- Cost Aggregation Logic ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Export Configurations ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Transaction Attributes API ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Invoices API ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Invoice Workflow E2E ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Import/Export E2E ✅" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const businessLogic = '${{ needs.business-logic-tests.result }}';
            const apiTests = '${{ needs.api-integration-tests.result }}';
            const e2eTests = '${{ needs.critical-workflows-e2e.result }}';
            
            const icon = (result) => result === 'success' ? '✅' : '❌';
            
            const comment = `## Test Results
            
            ${icon(businessLogic)} **Business Logic Tests**: ${businessLogic}
            ${icon(apiTests)} **API Integration Tests**: ${apiTests}
            ${icon(e2eTests)} **E2E Workflow Tests**: ${e2eTests}
            
            ### Coverage Areas
            - Cost Aggregation & Billing Logic
            - Import/Export Functionality
            - Transaction Management APIs
            - Invoice Management System
            - Critical User Workflows
            
            View full test results in the [Actions tab](${context.payload.pull_request.html_url.replace('/pull/', '/actions/runs/')})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wms_perf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database with large dataset
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_perf_test
        run: |
          npx prisma migrate deploy
          npx tsx scripts/generate-performance-test-data.ts

      - name: Run performance benchmarks
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wms_perf_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret-key
        run: |
          # Test cost aggregation performance with large datasets
          echo "Testing cost aggregation with 10,000 transactions..."
          time npm test -- tests/__tests__/lib/calculations/cost-aggregation.test.ts --testNamePattern="performance"
          
          # Test API response times
          echo "Testing API response times..."
          npm run build
          npm start &
          sleep 10
          
          # Run basic load tests
          npx autocannon -c 10 -d 30 http://localhost:3000/api/invoices
          npx autocannon -c 10 -d 30 http://localhost:3000/api/transactions

      - name: Store performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30