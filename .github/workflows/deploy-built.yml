name: Deploy Built Application

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - 'infrastructure/**'
      - '*.md'
      - 'docs/**'

env:
  AWS_REGION: us-east-1
  S3_BUCKET: wms-deployment-${{ github.run_id }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
          NEXTAUTH_URL: "http://localhost:3000"
          NEXTAUTH_SECRET: "dummy"

      - name: Create deployment package
        run: |
          tar -czf /tmp/deploy.tar.gz \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='logs/*' \
            --exclude='test-results' \
            --exclude='coverage' \
            --exclude='.env*' \
            --exclude='deploy.tar.gz' \
            .
          mv /tmp/deploy.tar.gz deploy.tar.gz

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get current instance
        id: instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=WMS-TEST-IaC" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          
          if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
            echo "Error: No running WMS instance found"
            exit 1
          fi
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          
          INSTANCE_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      - name: Upload to S3
        run: |
          aws s3 mb s3://${{ env.S3_BUCKET }}
          aws s3 cp deploy.tar.gz s3://${{ env.S3_BUCKET }}/deploy.tar.gz
          
          # Generate presigned URL
          DOWNLOAD_URL=$(aws s3 presign s3://${{ env.S3_BUCKET }}/deploy.tar.gz --expires-in 3600)
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_ENV

      - name: Deploy via SSM
        run: |
          # Create deployment script
          cat > deploy-commands.json << 'EOFSCRIPT'
          {
            "Parameters": {
              "commands": [
              "# Download and extract deployment",
              "cd /home/wms",
              "sudo -u wms wget -q -O deploy-new.tar.gz '${{ env.download_url }}'",
              "sudo -u wms rm -rf app-new",
              "sudo -u wms mkdir -p app-new",
              "sudo -u wms tar -xzf deploy-new.tar.gz -C app-new",
              "cd app-new",
              "# Create .env file",
              "cat > /tmp/env.tmp << 'ENVEOF'",
              "DATABASE_URL=\"postgresql://wms:wms_secure_password_2024@localhost:5432/wms_production\"",
              "NEXTAUTH_URL=\"http://${{ steps.instance.outputs.instance_ip }}:3000\"",
              "NEXTAUTH_SECRET=\"production_secret_key_change_in_production_123456\"",
              "NODE_ENV=\"production\"",
              "PORT=3000",
              "ENVEOF",
              "sudo -u wms cp /tmp/env.tmp .env",
              "# Install production dependencies",
              "sudo -u wms npm ci --production",
              "# Stop old app",
              "sudo -u wms pm2 stop wms-app || true",
              "# Switch directories",
              "cd /home/wms",
              "sudo -u wms rm -rf app-old",
              "if [ -d app ]; then sudo -u wms mv app app-old; fi",
              "sudo -u wms mv app-new app",
              "# Start new app",
              "cd app",
              "sudo -u wms pm2 delete wms-app || true",
              "sudo -u wms PORT=3000 pm2 start server.js --name wms-app",
              "sudo -u wms pm2 save",
              "# Health check",
              "sleep 10",
              "curl -f http://localhost:3000 && echo 'Deployment successful!' || echo 'Health check failed'"
              ]
            }
          }
          EOFSCRIPT
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ steps.instance.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --cli-input-json file://deploy-commands.json \
            --timeout-seconds 600 \
            --output text \
            --query 'Command.CommandId')
          
          echo "SSM Command ID: $COMMAND_ID"
          
          # Wait for deployment
          for i in {1..20}; do
            sleep 30
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ steps.instance.outputs.instance_id }} \
              --query 'Status' \
              --output text 2>/dev/null || echo "Pending")
            
            echo "Status: $STATUS"
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "❌ Deployment failed!"
              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id ${{ steps.instance.outputs.instance_id }} \
                --query 'StandardErrorContent' \
                --output text
              exit 1
            fi
          done

      - name: Cleanup S3
        if: always()
        run: |
          aws s3 rm s3://${{ env.S3_BUCKET }}/deploy.tar.gz || true
          aws s3 rb s3://${{ env.S3_BUCKET }} || true

      - name: Deployment summary
        if: success()
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Instance ID**: ${{ steps.instance.outputs.instance_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL**: http://${{ steps.instance.outputs.instance_ip }}:3000" >> $GITHUB_STEP_SUMMARY
          echo "- **Login**: admin@targonglobal.com / SecureWarehouse2024!" >> $GITHUB_STEP_SUMMARY