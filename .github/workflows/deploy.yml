name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to EC2 via SSM
      run: |
        # Create deployment package
        tar -czf deploy.tar.gz \
          .next \
          public \
          prisma \
          package*.json \
          next.config.js \
          server.js \
          tsconfig.json \
          src \
          app
        
        # Base64 encode for transfer
        base64 deploy.tar.gz > deploy.tar.gz.b64
        
        # Split into chunks if needed
        split -b 200k deploy.tar.gz.b64 deploy-chunk-
        
        # Transfer and deploy via SSM
        INSTANCE_ID="i-065d0aa80cdcd55b1"
        
        # Create deployment directory
        aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["mkdir -p /home/ubuntu/deploy"]' \
          --output text --query 'Command.CommandId'
        
        # Transfer chunks
        for chunk in deploy-chunk-*; do
          CONTENT=$(cat $chunk)
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"echo '$CONTENT' >> /home/ubuntu/deploy/deploy.tar.gz.b64\"]" \
            --output text --query 'Command.CommandId'
        done
        
        # Deploy application
        DEPLOY_CMD=$(aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --timeout-seconds 600 \
          --parameters 'commands=[
            "cd /home/ubuntu/deploy",
            "base64 -d deploy.tar.gz.b64 > deploy.tar.gz",
            "sudo mkdir -p /var/www/wms",
            "sudo tar -xzf deploy.tar.gz -C /var/www/wms",
            "cd /var/www/wms",
            "sudo chown -R ubuntu:ubuntu /var/www/wms",
            "npm ci --production",
            "cat > .env.production << EOF",
            "NODE_ENV=production",
            "PORT=3000",
            "DATABASE_URL=postgresql://wms_user:wms_pass_2024@localhost:5432/wms_db",
            "NEXTAUTH_URL=http://3.87.244.116",
            "NEXTAUTH_SECRET=$(openssl rand -base64 32)",
            "DEMO_ADMIN_PASSWORD=Admin@2024",
            "DEMO_STAFF_PASSWORD=Staff@2024",
            "EOF",
            "npx prisma migrate deploy || echo No pending migrations",
            "pm2 stop wms || true",
            "pm2 start npm --name wms -- start",
            "pm2 save",
            "echo Deployment complete!"
          ]' \
          --output text --query 'Command.CommandId')
        
        # Wait for deployment to complete
        aws ssm wait command-executed \
          --command-id $DEPLOY_CMD \
          --instance-id $INSTANCE_ID
        
        # Check deployment status
        aws ssm get-command-invocation \
          --command-id $DEPLOY_CMD \
          --instance-id $INSTANCE_ID \
          --query 'Status' \
          --output text