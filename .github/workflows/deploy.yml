name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1
        DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
        NEXTAUTH_SECRET: "dummy-secret-for-build"
        NEXTAUTH_URL: "http://localhost:3000"
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to EC2 via SSM
      run: |
        INSTANCE_ID="i-0d23b6d8d1d958e46"
        
        # Create deployment package
        echo "üì¶ Creating deployment package..."
        tar -czf deploy.tar.gz \
          .next \
          prisma \
          package*.json \
          next.config.js \
          server.js \
          tsconfig.json \
          tailwind.config.js \
          postcss.config.js
        
        # Upload to temporary S3 bucket
        BUCKET_NAME="wms-deploy-$(date +%s)"
        aws s3 mb s3://$BUCKET_NAME
        aws s3 cp deploy.tar.gz s3://$BUCKET_NAME/deploy.tar.gz
        
        # Generate presigned URL (valid for 1 hour)
        DOWNLOAD_URL=$(aws s3 presign s3://$BUCKET_NAME/deploy.tar.gz --expires-in 3600)
        
        # Deploy via SSM
        echo "üöÄ Deploying to EC2 instance..."
        DEPLOY_CMD=$(aws ssm send-command \
          --instance-ids $INSTANCE_ID \
          --document-name "AWS-RunShellScript" \
          --timeout-seconds 900 \
          --parameters "commands=[
            'cd /var/www/wms',
            'echo Downloading deployment package...',
            'wget -O /tmp/deploy.tar.gz \"$DOWNLOAD_URL\"',
            'tar -xzf /tmp/deploy.tar.gz',
            'npm ci --production',
            'npx prisma migrate deploy || true',
            'pm2 restart wms || pm2 start npm --name wms -- start',
            'pm2 save',
            'rm /tmp/deploy.tar.gz',
            'echo Deployment complete!'
          ]" \
          --output text --query 'Command.CommandId')
        
        echo "Deployment command ID: $DEPLOY_CMD"
        
        # Wait for deployment to complete (with extended timeout)
        echo "Waiting for deployment to complete..."
        for i in {1..30}; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $DEPLOY_CMD \
            --instance-id $INSTANCE_ID \
            --query 'Status' \
            --output text 2>/dev/null || echo "waiting")
          
          if [ "$STATUS" = "Success" ] || [ "$STATUS" = "Failed" ]; then
            break
          fi
          
          echo "Status: $STATUS (attempt $i/30)"
          sleep 10
        done
        
        # Get deployment status
        STATUS=$(aws ssm get-command-invocation \
          --command-id $DEPLOY_CMD \
          --instance-id $INSTANCE_ID \
          --query 'Status' \
          --output text)
        
        # Cleanup S3
        aws s3 rm s3://$BUCKET_NAME/deploy.tar.gz
        aws s3 rb s3://$BUCKET_NAME
        
        if [ "$STATUS" = "Success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê Application URL: http://44.201.103.199:3000/WMS/auth/login"
        else
          echo "‚ùå Deployment failed with status: $STATUS"
          exit 1
        fi