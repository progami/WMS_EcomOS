name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Create a GitHub deployment
    - name: Create GitHub deployment
      uses: actions/github-script@v7
      id: deployment
      if: always()
      continue-on-error: true
      with:
        script: |
          try {
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              description: 'Deploying to ${{ github.event.inputs.environment || 'production' }}',
              auto_merge: false,
              required_contexts: []
            });
            
            core.setOutput('deployment_id', deployment.data.id);
            return deployment.data.id;
          } catch (error) {
            console.log('Failed to create deployment:', error.message);
            core.setOutput('deployment_id', '');
            return null;
          }
    
    # Update deployment status to in_progress
    - name: Update deployment status (in progress)
      uses: actions/github-script@v7
      if: steps.deployment.outputs.deployment_id != ''
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.deployment_id }},
            state: 'in_progress',
            description: 'Deployment in progress...',
            environment_url: 'https://wms.targonglobal.com'
          });
    
    - name: Deploy to production server
      id: deploy
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          echo "üöÄ Starting deployment..."
          
          # Run deployment as ubuntu user
          set -e
          
          echo "üìÅ Navigating to application directory..."
          cd /home/ubuntu/wms-ecomos
          
          echo "üîÑ Pulling latest changes from main branch..."
          git fetch origin main
          git reset --hard origin/main
          
          echo "üì¶ Installing dependencies..."
          npm ci --production=false
          
          echo "üóÑÔ∏è Running database migrations..."
          npx prisma generate
          npx prisma migrate deploy || echo "No pending migrations"
          
          echo "üî® Building application..."
          export BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Build time: $BUILD_TIME"
          npm run build
          
          echo "‚ôªÔ∏è Restarting application..."
          pm2 restart wms-app-ubuntu || pm2 start ecosystem.config.js --env production
          
          echo "üíæ Saving PM2 configuration..."
          pm2 save
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üìä Application status:"
          pm2 list
    
    - name: Health check
      id: health_check
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          echo "üè• Running health check..."
          sleep 10
          
          # Check if app is running
          if curl -f -s http://localhost:3001/api/health > /dev/null; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed!"
            pm2 logs wms-app-ubuntu --lines 50
            exit 1
          fi
    
    # Update deployment status based on result
    - name: Update deployment status (success)
      if: success() && steps.deployment.outputs.deployment_id != ''
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.deployment_id }},
            state: 'success',
            description: 'Deployment successful',
            environment_url: 'https://wms.targonglobal.com'
          });
    
    - name: Update deployment status (failure)
      if: failure() && steps.deployment.outputs.deployment_id != ''
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ steps.deployment.outputs.deployment_id }},
            state: 'failure',
            description: 'Deployment failed',
            environment_url: 'https://wms.targonglobal.com'
          });
    
    - name: Notify deployment status
      if: always()
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: 22
        script: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment successful - $(date)"
          else
            echo "‚ùå Deployment failed - $(date)"
          fi