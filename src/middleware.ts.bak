import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { getToken } from 'next-auth/jwt'
import { checkRateLimit, loginRateLimit, apiRateLimit } from './lib/rate-limit'

// Define public routes that don't require authentication
const publicRoutes = [
  '/auth/login',
  '/api/auth',
  '/_next',
  '/favicon.ico',
]

// Define admin-only routes
const adminOnlyRoutes = [
  '/admin',
  '/api/admin',
  '/config',
  '/api/config',
  '/finance',
  '/api/finance',
  '/operations',
  '/api/operations',
  '/reports',
  '/api/reports',
  '/integrations',
  '/api/integrations',
  '/dashboard',
  '/api/dashboard',
]

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname

  // Apply rate limiting to login attempts
  if (pathname === '/api/auth/callback/credentials') {
    const rateLimitCheck = checkRateLimit(request, loginRateLimit)
    if (!rateLimitCheck.allowed) {
      return NextResponse.json(
        { error: rateLimitCheck.message },
        { 
          status: 429,
          headers: {
            'Retry-After': String(rateLimitCheck.retryAfter || 60),
          },
        }
      )
    }
  }

  // Apply general rate limiting to API routes
  if (pathname.startsWith('/api/') && !pathname.startsWith('/api/auth')) {
    const rateLimitCheck = checkRateLimit(request, apiRateLimit)
    if (!rateLimitCheck.allowed) {
      return NextResponse.json(
        { error: rateLimitCheck.message },
        { 
          status: 429,
          headers: {
            'Retry-After': String(rateLimitCheck.retryAfter || 60),
          },
        }
      )
    }
  }

  // Allow public routes
  if (publicRoutes.some(route => pathname.startsWith(route))) {
    return NextResponse.next()
  }

  // Check authentication
  const token = await getToken({
    req: request,
    secret: process.env.NEXTAUTH_SECRET,
  })

  // Redirect to login if not authenticated
  if (!token) {
    const loginUrl = new URL('/auth/login', request.url)
    loginUrl.searchParams.set('callbackUrl', pathname)
    return NextResponse.redirect(loginUrl)
  }

  // For production with admin-only access, ensure user is admin
  if (process.env.NODE_ENV === 'production') {
    if (token.role !== 'admin') {
      // Log unauthorized access attempt
      console.error(`Unauthorized access attempt by ${token.email} to ${pathname}`)
      
      // Redirect to unauthorized page
      return NextResponse.redirect(new URL('/unauthorized', request.url))
    }
  }

  // Add security headers
  const response = NextResponse.next()
  
  // Security headers
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  response.headers.set(
    'Content-Security-Policy',
    "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://maps.googleapis.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https://maps.googleapis.com; frame-src 'none';"
  )
  
  // Add cache control for sensitive pages
  if (pathname.startsWith('/admin') || pathname.startsWith('/api')) {
    response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate')
    response.headers.set('Pragma', 'no-cache')
    response.headers.set('Expires', '0')
  }

  return response
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public).*)',
  ],
}