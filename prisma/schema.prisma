// Prisma Schema for Warehouse Management System
// Using PostgreSQL with Supabase

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================================
// ENUMS
// =====================================================

enum UserRole {
  admin
  staff
}

enum TransactionType {
  RECEIVE
  SHIP
  ADJUST_IN
  ADJUST_OUT
  TRANSFER
}

enum CostCategory {
  Container
  Carton
  Pallet
  Storage
  Unit
  Shipment
  Accessorial
}

enum InvoiceStatus {
  pending
  reconciled
  disputed
  paid
}

enum ReconciliationStatus {
  match
  overbilled
  underbilled
}

// =====================================================
// USER MANAGEMENT
// =====================================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String    @map("password_hash")
  fullName      String    @map("full_name")
  role          UserRole
  warehouseId   String?   @map("warehouse_id")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @map("last_login_at")

  // Relations
  warehouse             Warehouse?              @relation(fields: [warehouseId], references: [id])
  createdTransactions   InventoryTransaction[]  @relation("TransactionCreator")
  createdSkuVersions    SkuVersion[]
  createdConfigs        WarehouseSkuConfig[]
  createdCostRates      CostRate[]
  createdCalcCosts      CalculatedCost[]
  createdInvoices       Invoice[]
  resolvedReconciliations InvoiceReconciliation[] @relation("ReconciliationResolver")
  auditLogs             AuditLog[]

  @@index([email])
  @@index([warehouseId])
  @@map("users")
}

// =====================================================
// MASTER DATA
// =====================================================

model Warehouse {
  id            String   @id @default(uuid())
  code          String   @unique
  name          String
  address       String?
  contactEmail  String?  @map("contact_email")
  contactPhone  String?  @map("contact_phone")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  users                 User[]
  warehouseSkuConfigs   WarehouseSkuConfig[]
  costRates             CostRate[]
  inventoryTransactions InventoryTransaction[]
  inventoryBalances     InventoryBalance[]
  storageLedgerEntries  StorageLedger[]
  calculatedCosts       CalculatedCost[]
  invoices              Invoice[]

  @@map("warehouses")
}

model Sku {
  id                  String   @id @default(uuid())
  skuCode             String   @unique @map("sku_code")
  asin                String?
  description         String
  packSize            Int      @map("pack_size")
  material            String?
  unitDimensionsCm    String?  @map("unit_dimensions_cm")
  unitWeightKg        Decimal? @map("unit_weight_kg") @db.Decimal(10, 3)
  unitsPerCarton      Int      @map("units_per_carton")
  cartonDimensionsCm  String?  @map("carton_dimensions_cm")
  cartonWeightKg      Decimal? @map("carton_weight_kg") @db.Decimal(10, 3)
  packagingType       String?  @map("packaging_type")
  notes               String?
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  versions              SkuVersion[]
  warehouseConfigs      WarehouseSkuConfig[]
  inventoryTransactions InventoryTransaction[]
  inventoryBalances     InventoryBalance[]
  storageLedgerEntries  StorageLedger[]
  calculatedCosts       CalculatedCost[]

  @@index([skuCode])
  @@map("skus")
}

model SkuVersion {
  id                 String    @id @default(uuid())
  skuId              String    @map("sku_id")
  versionIdentifier  String    @map("version_identifier")
  effectiveDate      DateTime  @map("effective_date") @db.Date
  endDate            DateTime? @map("end_date") @db.Date
  unitsPerCarton     Int       @map("units_per_carton")
  cartonDimensionsCm String?   @map("carton_dimensions_cm")
  cartonWeightKg     Decimal?  @map("carton_weight_kg") @db.Decimal(10, 3)
  notes              String?
  createdAt          DateTime  @default(now()) @map("created_at")
  createdById        String    @map("created_by")

  // Relations
  sku       Sku  @relation(fields: [skuId], references: [id])
  createdBy User @relation(fields: [createdById], references: [id])

  @@map("sku_versions")
}

// =====================================================
// WAREHOUSE CONFIGURATION
// =====================================================

model WarehouseSkuConfig {
  id                       String    @id @default(uuid())
  warehouseId              String    @map("warehouse_id")
  skuId                    String    @map("sku_id")
  storageCartonsPerPallet  Int       @map("storage_cartons_per_pallet")
  shippingCartonsPerPallet Int       @map("shipping_cartons_per_pallet")
  maxStackingHeightCm      Int?      @map("max_stacking_height_cm")
  effectiveDate            DateTime  @map("effective_date") @db.Date
  endDate                  DateTime? @map("end_date") @db.Date
  notes                    String?
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")
  createdById              String    @map("created_by")

  // Relations
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  sku       Sku       @relation(fields: [skuId], references: [id])
  createdBy User      @relation(fields: [createdById], references: [id])

  @@unique([warehouseId, skuId, effectiveDate])
  @@index([warehouseId, skuId])
  @@map("warehouse_sku_configs")
}

// =====================================================
// COST MANAGEMENT
// =====================================================

model CostRate {
  id             String       @id @default(uuid())
  warehouseId    String       @map("warehouse_id")
  costCategory   CostCategory @map("cost_category")
  costName       String       @map("cost_name")
  costValue      Decimal      @map("cost_value") @db.Decimal(12, 2)
  unitOfMeasure  String       @map("unit_of_measure")
  effectiveDate  DateTime     @map("effective_date") @db.Date
  endDate        DateTime?    @map("end_date") @db.Date
  notes          String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  createdById    String       @map("created_by")

  // Relations
  warehouse       Warehouse        @relation(fields: [warehouseId], references: [id])
  createdBy       User             @relation(fields: [createdById], references: [id])
  calculatedCosts CalculatedCost[]

  @@unique([warehouseId, costName, effectiveDate])
  @@index([warehouseId, costName, effectiveDate])
  @@map("cost_rates")
}

// =====================================================
// INVENTORY TRANSACTIONS
// =====================================================

model InventoryTransaction {
  id                  String          @id @default(uuid())
  transactionId       String          @unique @map("transaction_id")
  warehouseId         String          @map("warehouse_id")
  skuId               String          @map("sku_id")
  batchLot            String          @map("batch_lot")
  transactionType     TransactionType @map("transaction_type")
  referenceId         String?         @map("reference_id")
  cartonsIn           Int             @default(0) @map("cartons_in")
  cartonsOut          Int             @default(0) @map("cartons_out")
  storagePalletsIn    Int             @default(0) @map("storage_pallets_in")
  shippingPalletsOut  Int             @default(0) @map("shipping_pallets_out")
  storageCartonsPerPallet   Int?      @map("storage_cartons_per_pallet") // Batch-specific config
  shippingCartonsPerPallet  Int?      @map("shipping_cartons_per_pallet") // Batch-specific config
  notes               String?
  transactionDate     DateTime        @map("transaction_date")
  createdAt           DateTime        @default(now()) @map("created_at")
  createdById         String          @map("created_by")

  // Relations
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  sku       Sku       @relation(fields: [skuId], references: [id])
  createdBy User      @relation("TransactionCreator", fields: [createdById], references: [id])

  @@index([transactionDate])
  @@index([warehouseId, skuId, batchLot])
  @@map("inventory_transactions")
}

// =====================================================
// INVENTORY BALANCES
// =====================================================

model InventoryBalance {
  id                  String    @id @default(uuid())
  warehouseId         String    @map("warehouse_id")
  skuId               String    @map("sku_id")
  batchLot            String    @map("batch_lot")
  currentCartons      Int       @default(0) @map("current_cartons")
  currentPallets      Int       @default(0) @map("current_pallets")
  currentUnits        Int       @default(0) @map("current_units")
  storageCartonsPerPallet   Int?      @map("storage_cartons_per_pallet") // Batch-specific config
  shippingCartonsPerPallet  Int?      @map("shipping_cartons_per_pallet") // Batch-specific config
  lastTransactionDate DateTime? @map("last_transaction_date")
  lastUpdated         DateTime  @default(now()) @updatedAt @map("last_updated")

  // Relations
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  sku       Sku       @relation(fields: [skuId], references: [id])

  @@unique([warehouseId, skuId, batchLot])
  @@index([warehouseId, skuId, batchLot])
  @@map("inventory_balances")
}

// =====================================================
// STORAGE CALCULATIONS
// =====================================================

model StorageLedger {
  id                   String   @id @default(uuid())
  slId                 String   @unique @map("sl_id")
  weekEndingDate       DateTime @map("week_ending_date") @db.Date
  warehouseId          String   @map("warehouse_id")
  skuId                String   @map("sku_id")
  batchLot             String   @map("batch_lot")
  cartonsEndOfMonday   Int      @map("cartons_end_of_monday")
  storagePalletsCharged Int     @map("storage_pallets_charged")
  applicableWeeklyRate Decimal  @map("applicable_weekly_rate") @db.Decimal(10, 2)
  calculatedWeeklyCost Decimal  @map("calculated_weekly_cost") @db.Decimal(12, 2)
  billingPeriodStart   DateTime @map("billing_period_start") @db.Date
  billingPeriodEnd     DateTime @map("billing_period_end") @db.Date
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  sku       Sku       @relation(fields: [skuId], references: [id])

  @@unique([weekEndingDate, warehouseId, skuId, batchLot])
  @@index([billingPeriodStart, billingPeriodEnd])
  @@index([warehouseId, weekEndingDate])
  @@map("storage_ledger")
}

// =====================================================
// COST CALCULATIONS
// =====================================================

model CalculatedCost {
  id                     String   @id @default(uuid())
  calculatedCostId       String   @unique @map("calculated_cost_id")
  transactionType        String   @map("transaction_type") // 'inventory' or 'storage'
  transactionReferenceId String   @map("transaction_reference_id")
  costRateId             String   @map("cost_rate_id")
  warehouseId            String   @map("warehouse_id")
  skuId                  String   @map("sku_id")
  batchLot               String?  @map("batch_lot")
  transactionDate        DateTime @map("transaction_date") @db.Date
  billingWeekEnding      DateTime @map("billing_week_ending") @db.Date
  billingPeriodStart     DateTime @map("billing_period_start") @db.Date
  billingPeriodEnd       DateTime @map("billing_period_end") @db.Date
  quantityCharged        Decimal  @map("quantity_charged") @db.Decimal(12, 2)
  applicableRate         Decimal  @map("applicable_rate") @db.Decimal(10, 2)
  calculatedCost         Decimal  @map("calculated_cost") @db.Decimal(12, 2)
  costAdjustmentValue    Decimal  @default(0) @map("cost_adjustment_value") @db.Decimal(12, 2)
  finalExpectedCost      Decimal  @map("final_expected_cost") @db.Decimal(12, 2)
  notes                  String?
  createdAt              DateTime @default(now()) @map("created_at")
  createdById            String   @map("created_by")

  // Relations
  costRate  CostRate  @relation(fields: [costRateId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  sku       Sku       @relation(fields: [skuId], references: [id])
  createdBy User      @relation(fields: [createdById], references: [id])

  @@index([billingPeriodStart, billingPeriodEnd])
  @@index([warehouseId, transactionDate])
  @@map("calculated_costs")
}

// =====================================================
// INVOICING
// =====================================================

model Invoice {
  id                 String        @id @default(uuid())
  invoiceNumber      String        @unique @map("invoice_number")
  warehouseId        String        @map("warehouse_id")
  billingPeriodStart DateTime      @map("billing_period_start") @db.Date
  billingPeriodEnd   DateTime      @map("billing_period_end") @db.Date
  invoiceDate        DateTime      @map("invoice_date") @db.Date
  dueDate            DateTime?     @map("due_date") @db.Date
  totalAmount        Decimal       @map("total_amount") @db.Decimal(12, 2)
  status             InvoiceStatus @default(pending)
  notes              String?
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  createdById        String        @map("created_by")

  // Relations
  warehouse        Warehouse               @relation(fields: [warehouseId], references: [id])
  createdBy        User                    @relation(fields: [createdById], references: [id])
  lineItems        InvoiceLineItem[]
  reconciliations  InvoiceReconciliation[]

  @@map("invoices")
}

model InvoiceLineItem {
  id           String       @id @default(uuid())
  invoiceId    String       @map("invoice_id")
  costCategory CostCategory @map("cost_category")
  costName     String       @map("cost_name")
  quantity     Decimal      @db.Decimal(12, 2)
  unitRate     Decimal?     @map("unit_rate") @db.Decimal(10, 2)
  amount       Decimal      @db.Decimal(12, 2)
  notes        String?
  createdAt    DateTime     @default(now()) @map("created_at")

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

// =====================================================
// RECONCILIATION
// =====================================================

model InvoiceReconciliation {
  id              String               @id @default(uuid())
  invoiceId       String               @map("invoice_id")
  costCategory    CostCategory         @map("cost_category")
  costName        String               @map("cost_name")
  expectedAmount  Decimal              @map("expected_amount") @db.Decimal(12, 2)
  invoicedAmount  Decimal              @map("invoiced_amount") @db.Decimal(12, 2)
  difference      Decimal              @db.Decimal(12, 2)
  status          ReconciliationStatus
  resolutionNotes String?              @map("resolution_notes")
  resolvedById    String?              @map("resolved_by")
  resolvedAt      DateTime?            @map("resolved_at")
  createdAt       DateTime             @default(now()) @map("created_at")

  // Relations
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  resolvedBy User?   @relation("ReconciliationResolver", fields: [resolvedById], references: [id])

  @@map("invoice_reconciliations")
}

// =====================================================
// AUDIT LOG
// =====================================================

model AuditLog {
  id        String   @id @default(uuid())
  tableName String   @map("table_name")
  recordId  String   @map("record_id")
  action    String   // INSERT, UPDATE, DELETE
  changes   Json?
  userId    String   @map("user_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([tableName, recordId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}