generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(uuid())
  email                   String                  @unique
  username                String?                 @unique
  passwordHash            String                  @map("password_hash")
  fullName                String                  @map("full_name")
  role                    UserRole
  warehouseId             String?                 @map("warehouse_id")
  isActive                Boolean                 @default(true) @map("is_active")
  isDemo                  Boolean                 @default(false) @map("is_demo")
  createdAt               DateTime                @default(now()) @map("created_at")
  updatedAt               DateTime                @updatedAt @map("updated_at")
  lastLoginAt             DateTime?               @map("last_login_at")
  lockedUntil             DateTime?               @map("locked_until")
  lockedReason            String?                 @map("locked_reason")
  auditLogs               AuditLog[]
  createdCalcCosts        CalculatedCost[]
  createdCostRates        CostRate[]
  createdTransactions     InventoryTransaction[]  @relation("TransactionCreator")
  resolvedReconciliations InvoiceReconciliation[] @relation("ReconciliationResolver")
  createdInvoices         Invoice[]
  customerInvoices        Invoice[]               @relation("CustomerInvoices")
  createdSkuVersions      SkuVersion[]
  warehouse               Warehouse?              @relation(fields: [warehouseId], references: [id])
  createdConfigs          WarehouseSkuConfig[]

  @@index([email])
  @@index([username])
  @@index([warehouseId])
  @@map("users")
}

model Warehouse {
  id                    String                  @id @default(uuid())
  code                  String                  @unique
  name                  String
  address               String?
  latitude              Float?                  @map("latitude")
  longitude             Float?                  @map("longitude")
  contactEmail          String?                 @map("contact_email")
  contactPhone          String?                 @map("contact_phone")
  isActive              Boolean                 @default(true) @map("is_active")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  calculatedCosts       CalculatedCost[]
  costRates             CostRate[]
  inventoryTransactions InventoryTransaction[]
  invoices              Invoice[]
  storageLedgerEntries  StorageLedger[]
  users                 User[]
  notifications         WarehouseNotification[]
  warehouseSkuConfigs   WarehouseSkuConfig[]

  @@map("warehouses")
}

model Sku {
  id                    String                 @id @default(uuid())
  skuCode               String                 @unique @map("sku_code")
  asin                  String?
  description           String
  packSize              Int                    @map("pack_size")
  material              String?
  unitDimensionsCm      String?                @map("unit_dimensions_cm")
  unitWeightKg          Decimal?               @map("unit_weight_kg") @db.Decimal(10, 3)
  unitsPerCarton        Int                    @map("units_per_carton")
  cartonDimensionsCm    String?                @map("carton_dimensions_cm")
  cartonWeightKg        Decimal?               @map("carton_weight_kg") @db.Decimal(10, 3)
  packagingType         String?                @map("packaging_type")
  isActive              Boolean                @default(true) @map("is_active")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  fbaStock              Int                    @default(0) @map("fba_stock")
  fbaStockLastUpdated   DateTime?              @map("fba_stock_last_updated")
  calculatedCosts       CalculatedCost[]
  inventoryTransactions InventoryTransaction[]
  versions              SkuVersion[]
  storageLedgerEntries  StorageLedger[]
  warehouseConfigs      WarehouseSkuConfig[]

  @@index([skuCode])
  @@map("skus")
}

model SkuVersion {
  id                 String    @id @default(uuid())
  skuId              String    @map("sku_id")
  versionIdentifier  String    @map("version_identifier")
  effectiveDate      DateTime  @map("effective_date") @db.Date
  endDate            DateTime? @map("end_date") @db.Date
  unitsPerCarton     Int       @map("units_per_carton")
  cartonDimensionsCm String?   @map("carton_dimensions_cm")
  cartonWeightKg     Decimal?  @map("carton_weight_kg") @db.Decimal(10, 3)
  createdAt          DateTime  @default(now()) @map("created_at")
  createdById        String    @map("created_by")
  createdBy          User      @relation(fields: [createdById], references: [id])
  sku                Sku       @relation(fields: [skuId], references: [id])

  @@map("sku_versions")
}

model WarehouseSkuConfig {
  id                       String    @id @default(uuid())
  warehouseId              String    @map("warehouse_id")
  skuId                    String    @map("sku_id")
  storageCartonsPerPallet  Int       @map("storage_cartons_per_pallet")
  shippingCartonsPerPallet Int       @map("shipping_cartons_per_pallet")
  maxStackingHeightCm      Int?      @map("max_stacking_height_cm")
  effectiveDate            DateTime  @map("effective_date") @db.Date
  endDate                  DateTime? @map("end_date") @db.Date
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")
  createdById              String    @map("created_by")
  createdBy                User      @relation(fields: [createdById], references: [id])
  sku                      Sku       @relation(fields: [skuId], references: [id])
  warehouse                Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([warehouseId, skuId, effectiveDate])
  @@index([warehouseId, skuId])
  @@map("warehouse_sku_configs")
}

model CostRate {
  id              String           @id @default(uuid())
  warehouseId     String           @map("warehouse_id")
  costCategory    CostCategory     @map("cost_category")
  costName        String           @map("cost_name")
  costValue       Decimal          @map("cost_value") @db.Decimal(12, 2)
  unitOfMeasure   String           @map("unit_of_measure")
  effectiveDate   DateTime         @map("effective_date") @db.Date
  endDate         DateTime?        @map("end_date") @db.Date
  isActive        Boolean          @default(true) @map("is_active")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  createdById     String           @map("created_by")
  calculatedCosts CalculatedCost[]
  createdBy       User             @relation(fields: [createdById], references: [id])
  warehouse       Warehouse        @relation(fields: [warehouseId], references: [id])

  @@unique([warehouseId, costName, effectiveDate])
  @@index([warehouseId, costName, effectiveDate])
  @@map("cost_rates")
}

model InventoryTransaction {
  id                       String          @id @default(uuid())
  transactionId            String          @unique @map("transaction_id")
  warehouseId              String          @map("warehouse_id")
  skuId                    String          @map("sku_id")
  batchLot                 String          @map("batch_lot")
  transactionType          TransactionType @map("transaction_type")
  referenceId              String?         @map("reference_id")
  cartonsIn                Int             @default(0) @map("cartons_in")
  cartonsOut               Int             @default(0) @map("cartons_out")
  storagePalletsIn         Int             @default(0) @map("storage_pallets_in")
  shippingPalletsOut       Int             @default(0) @map("shipping_pallets_out")
  transactionDate          DateTime        @map("transaction_date")
  pickupDate               DateTime?       @map("pickup_date")
  isReconciled             Boolean         @default(false) @map("is_reconciled")
  isDemo                   Boolean         @default(false) @map("is_demo")
  createdAt                DateTime        @default(now()) @map("created_at")
  createdById              String          @map("created_by")
  shippingCartonsPerPallet Int?            @map("shipping_cartons_per_pallet")
  storageCartonsPerPallet  Int?            @map("storage_cartons_per_pallet")
  shipName                 String?         @map("ship_name")
  trackingNumber           String?         @map("tracking_number")
  modeOfTransportation     String?         @map("mode_of_transportation")
  attachments              Json?
  unitsPerCarton           Int?            @map("units_per_carton")
  supplier                 String?         @map("supplier")
  unitValue                Decimal?        @map("unit_value") @db.Decimal(12, 4)
  createdBy                User            @relation("TransactionCreator", fields: [createdById], references: [id])
  sku                      Sku             @relation(fields: [skuId], references: [id])
  warehouse                Warehouse       @relation(fields: [warehouseId], references: [id])

  @@index([transactionDate])
  @@index([warehouseId, skuId, batchLot])
  @@index([transactionDate(sort: Desc)], map: "idx_inventory_transactions_date")
  @@index([warehouseId, skuId, batchLot], map: "idx_inventory_transactions_warehouse_sku_batch")
  @@map("inventory_transactions")
}


model StorageLedger {
  id                    String    @id @default(uuid())
  slId                  String    @unique @map("sl_id")
  weekEndingDate        DateTime  @map("week_ending_date") @db.Date
  warehouseId           String    @map("warehouse_id")
  skuId                 String    @map("sku_id")
  batchLot              String    @map("batch_lot")
  cartonsEndOfMonday    Int       @map("cartons_end_of_monday")
  storagePalletsCharged Int       @map("storage_pallets_charged")
  applicableWeeklyRate  Decimal   @map("applicable_weekly_rate") @db.Decimal(10, 2)
  calculatedWeeklyCost  Decimal   @map("calculated_weekly_cost") @db.Decimal(12, 2)
  billingPeriodStart    DateTime  @map("billing_period_start") @db.Date
  billingPeriodEnd      DateTime  @map("billing_period_end") @db.Date
  createdAt             DateTime  @default(now()) @map("created_at")
  sku                   Sku       @relation(fields: [skuId], references: [id])
  warehouse             Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([weekEndingDate, warehouseId, skuId, batchLot])
  @@index([billingPeriodStart, billingPeriodEnd])
  @@index([warehouseId, weekEndingDate])
  @@map("storage_ledger")
}

model CalculatedCost {
  id                     String                 @id @default(uuid())
  calculatedCostId       String                 @unique @map("calculated_cost_id")
  transactionType        String                 @map("transaction_type")
  transactionReferenceId String                 @map("transaction_reference_id")
  costRateId             String                 @map("cost_rate_id")
  warehouseId            String                 @map("warehouse_id")
  skuId                  String                 @map("sku_id")
  batchLot               String?                @map("batch_lot")
  transactionDate        DateTime               @map("transaction_date") @db.Date
  billingWeekEnding      DateTime               @map("billing_week_ending") @db.Date
  billingPeriodStart     DateTime               @map("billing_period_start") @db.Date
  billingPeriodEnd       DateTime               @map("billing_period_end") @db.Date
  quantityCharged        Decimal                @map("quantity_charged") @db.Decimal(12, 2)
  applicableRate         Decimal                @map("applicable_rate") @db.Decimal(10, 2)
  calculatedCost         Decimal                @map("calculated_cost") @db.Decimal(12, 2)
  costAdjustmentValue    Decimal                @default(0) @map("cost_adjustment_value") @db.Decimal(12, 2)
  finalExpectedCost      Decimal                @map("final_expected_cost") @db.Decimal(12, 2)
  createdAt              DateTime               @default(now()) @map("created_at")
  createdById            String                 @map("created_by")
  costRate               CostRate               @relation(fields: [costRateId], references: [id])
  createdBy              User                   @relation(fields: [createdById], references: [id])
  sku                    Sku                    @relation(fields: [skuId], references: [id])
  warehouse              Warehouse              @relation(fields: [warehouseId], references: [id])
  reconciliationDetails  ReconciliationDetail[]

  @@index([billingPeriodStart, billingPeriodEnd])
  @@index([warehouseId, transactionDate])
  @@map("calculated_costs")
}

model Invoice {
  id                 String                  @id @default(uuid())
  invoiceNumber      String                  @unique @map("invoice_number")
  warehouseId        String                  @map("warehouse_id")
  customerId         String                  @map("customer_id")
  billingPeriodStart DateTime                @map("billing_period_start") @db.Date
  billingPeriodEnd   DateTime                @map("billing_period_end") @db.Date
  invoiceDate        DateTime                @map("invoice_date") @db.Date
  issueDate          DateTime                @map("issue_date")
  dueDate            DateTime?               @map("due_date") @db.Date
  subtotal           Decimal                 @map("subtotal") @db.Decimal(12, 2)
  taxAmount          Decimal                 @map("tax_amount") @db.Decimal(12, 2)
  totalAmount        Decimal                 @map("total_amount") @db.Decimal(12, 2)
  paidAmount         Decimal                 @default(0) @map("paid_amount") @db.Decimal(12, 2)
  currency           String                  @default("USD")
  status             InvoiceStatus           @default(pending)
  notes              String?
  createdAt          DateTime                @default(now()) @map("created_at")
  updatedAt          DateTime                @updatedAt @map("updated_at")
  createdById        String                  @map("created_by")
  paymentMethod      String?                 @map("payment_method")
  paymentReference   String?                 @map("payment_reference")
  paymentDate        DateTime?               @map("payment_date") @db.Date
  paidDate           DateTime?               @map("paid_date")
  paidAt             DateTime?               @map("paid_at")
  paidBy             String?                 @map("paid_by")
  disputedAt         DateTime?               @map("disputed_at")
  disputedBy         String?                 @map("disputed_by")
  billingMonth       Int?                    @map("billing_month")
  billingYear        Int?                    @map("billing_year")
  type               String?
  auditLogs          InvoiceAuditLog[]
  disputes           InvoiceDispute[]
  lineItems          InvoiceLineItem[]
  reconciliations    InvoiceReconciliation[]
  createdBy          User                    @relation(fields: [createdById], references: [id])
  customer           User                    @relation("CustomerInvoices", fields: [customerId], references: [id])
  warehouse          Warehouse               @relation(fields: [warehouseId], references: [id])
  payments           Payment[]
  notifications      WarehouseNotification[]

  @@index([paymentDate], map: "idx_invoices_payment_date")
  @@index([paidAt], map: "idx_invoices_paid_at")
  @@index([disputedAt], map: "idx_invoices_disputed_at")
  @@map("invoices")
}

model InvoiceLineItem {
  id           String       @id @default(uuid())
  invoiceId    String       @map("invoice_id")
  costCategory CostCategory @map("cost_category")
  costName     String       @map("cost_name")
  quantity     Decimal      @db.Decimal(12, 2)
  unitRate     Decimal?     @map("unit_rate") @db.Decimal(10, 2)
  amount       Decimal      @db.Decimal(12, 2)
  createdAt    DateTime     @default(now()) @map("created_at")
  invoice      Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

model InvoiceReconciliation {
  id                    String                 @id @default(uuid())
  invoiceId             String                 @map("invoice_id")
  costCategory          CostCategory           @map("cost_category")
  costName              String                 @map("cost_name")
  expectedAmount        Decimal                @map("expected_amount") @db.Decimal(12, 2)
  invoicedAmount        Decimal                @map("invoiced_amount") @db.Decimal(12, 2)
  difference            Decimal                @db.Decimal(12, 2)
  status                ReconciliationStatus
  resolutionNotes       String?                @map("resolution_notes")
  resolvedById          String?                @map("resolved_by")
  resolvedAt            DateTime?              @map("resolved_at")
  suggestedAmount       Decimal?               @map("suggested_amount") @db.Decimal(12, 2)
  expectedQuantity      Decimal?               @map("expected_quantity") @db.Decimal(12, 2)
  invoicedQuantity      Decimal?               @map("invoiced_quantity") @db.Decimal(12, 2)
  unitRate              Decimal?               @map("unit_rate") @db.Decimal(10, 2)
  createdAt             DateTime               @default(now()) @map("created_at")
  invoice               Invoice                @relation(fields: [invoiceId], references: [id])
  resolvedBy            User?                  @relation("ReconciliationResolver", fields: [resolvedById], references: [id])
  reconciliationDetails ReconciliationDetail[]

  @@map("invoice_reconciliations")
}

model ReconciliationDetail {
  id               String                @id @default(uuid())
  reconciliationId String                @map("reconciliation_id")
  calculatedCostId String                @map("calculated_cost_id")
  quantity         Decimal               @db.Decimal(12, 2)
  amount           Decimal               @db.Decimal(12, 2)
  createdAt        DateTime              @default(now()) @map("created_at")
  calculatedCost   CalculatedCost        @relation(fields: [calculatedCostId], references: [id])
  reconciliation   InvoiceReconciliation @relation(fields: [reconciliationId], references: [id], onDelete: Cascade)

  @@index([reconciliationId])
  @@index([calculatedCostId])
  @@map("reconciliation_details")
}

model AuditLog {
  id        String   @id @default(uuid())
  tableName String   @map("table_name")
  recordId  String   @map("record_id")
  action    String
  changes   Json?
  userId    String   @map("user_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@index([tableName, recordId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model inventory_audit_log {
  id             Int       @id @default(autoincrement())
  action         String    @db.VarChar(10)
  transaction_id String?   @db.VarChar(255)
  attempted_by   String?   @db.VarChar(255)
  attempted_at   DateTime? @default(now()) @db.Timestamp(6)
  error_message  String?
  old_data       Json?
  new_data       Json?
}

model Settings {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model InvoiceDispute {
  id                 String              @id @default(uuid())
  invoiceId          String              @map("invoice_id")
  disputedBy         String              @map("disputed_by")
  disputedAt         DateTime            @default(now()) @map("disputed_at")
  reason             String
  disputedAmount     Decimal             @map("disputed_amount") @db.Decimal(12, 2)
  lineItemsDisputed  Int                 @default(0) @map("line_items_disputed")
  status             DisputeStatus       @default(open)
  contactedWarehouse Boolean             @default(false) @map("contacted_warehouse")
  resolutionNotes    String?             @map("resolution_notes")
  resolvedBy         String?             @map("resolved_by")
  resolvedAt         DateTime?           @map("resolved_at")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  resolutions        DisputeResolution[]
  invoice            Invoice             @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId], map: "idx_invoice_disputes_invoice_id")
  @@index([status], map: "idx_invoice_disputes_status")
  @@index([disputedAt], map: "idx_invoice_disputes_disputed_at")
  @@map("invoice_disputes")
}

model InvoiceAuditLog {
  id          String        @id @default(uuid())
  invoiceId   String        @map("invoice_id")
  action      InvoiceAction
  performedBy String        @map("performed_by")
  performedAt DateTime      @default(now()) @map("performed_at")
  details     Json?
  createdAt   DateTime      @default(now()) @map("created_at")
  invoice     Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId], map: "idx_invoice_audit_logs_invoice_id")
  @@index([action], map: "idx_invoice_audit_logs_action")
  @@index([performedAt], map: "idx_invoice_audit_logs_performed_at")
  @@map("invoice_audit_logs")
}

model WarehouseNotification {
  id               String           @id @default(uuid())
  warehouseId      String           @map("warehouse_id")
  type             NotificationType
  title            String
  message          String
  relatedInvoiceId String?          @map("related_invoice_id")
  read             Boolean          @default(false)
  readAt           DateTime?        @map("read_at")
  readBy           String?          @map("read_by")
  createdAt        DateTime         @default(now()) @map("created_at")
  relatedInvoice   Invoice?         @relation(fields: [relatedInvoiceId], references: [id])
  warehouse        Warehouse        @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@index([warehouseId], map: "idx_warehouse_notifications_warehouse_id")
  @@index([type], map: "idx_warehouse_notifications_type")
  @@index([read], map: "idx_warehouse_notifications_read")
  @@index([createdAt], map: "idx_warehouse_notifications_created_at")
  @@map("warehouse_notifications")
}

model DisputeResolution {
  id               String         @id @default(uuid())
  disputeId        String         @map("dispute_id")
  resolutionType   ResolutionType
  resolutionAmount Decimal?       @map("resolution_amount") @db.Decimal(12, 2)
  resolutionNotes  String?        @map("resolution_notes")
  resolvedBy       String         @map("resolved_by")
  resolvedAt       DateTime       @default(now()) @map("resolved_at")
  createdAt        DateTime       @default(now()) @map("created_at")
  dispute          InvoiceDispute @relation(fields: [disputeId], references: [id], onDelete: Cascade)

  @@index([disputeId], map: "idx_dispute_resolutions_dispute_id")
  @@map("dispute_resolutions")
}

model Payment {
  id          String   @id @default(uuid())
  invoiceId   String   @map("invoice_id")
  amount      Decimal  @db.Decimal(12, 2)
  method      String
  status      String
  processedAt DateTime @map("processed_at")
  createdAt   DateTime @default(now()) @map("created_at")
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId], map: "idx_payment_invoice")
  @@map("payments")
}

enum UserRole {
  admin
  staff
}

enum TransactionType {
  RECEIVE
  SHIP
  ADJUST_IN
  ADJUST_OUT
  TRANSFER
}

enum CostCategory {
  Container
  Carton
  Pallet
  Storage
  Unit
  Shipment
  Accessorial
}

enum InvoiceStatus {
  pending
  reconciled
  disputed
  paid
}

enum ReconciliationStatus {
  match
  overbilled
  underbilled
}

enum DisputeStatus {
  open
  resolved
  escalated
}

enum InvoiceAction {
  CREATED
  UPDATED
  ACCEPTED
  DISPUTED
  RESOLVED
  PAID
}

enum NotificationType {
  INVOICE_DISPUTED
  RECONCILIATION_COMPLETE
  PAYMENT_RECEIVED
  DISPUTE_RESOLVED
}

enum ResolutionType {
  ACCEPTED
  REJECTED
  PARTIAL_ACCEPT
  ESCALATED
}
